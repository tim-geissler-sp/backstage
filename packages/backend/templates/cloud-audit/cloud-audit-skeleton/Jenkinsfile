/*
 * Copyright (C) 2017 SailPoint Technologies, Inc.  All rights reserved.
 */

// Load the shared release utils which provides several SailPoint specific commands such as
// drydockDeploy() and createDeployTicket. The @ sign specifies a specific tag within the
// shared library to use. Note: The "_" underscore is not a typo.
// https://github.com/sailpoint/jenkins-release-utils
@Library('sailpoint/jenkins-release-utils')_

/**
 * Jenkins release pipeline for the aer service.
 */
pipeline {
    agent none

    tools {
        jdk "openjdk 8"
    }

   options {
        // Keep the last 395 builds (For Auditing)
        buildDiscarder(logRotator(numToKeepStr: '395'))
    }

    triggers {
        pollSCM('H/5 * * * *')
    }

    environment {
        // The scrum which owns this component
        JIRA_PROJECT = 'PLTCORE'

        // The prefix in Jira for the deployment ticket name
        JIRA_TICKET_PREFIX = 'AER'

        // The component name in Jira for the deployment ticket
        JIRA_COMPONENT = 'AER'

        // The branch releases can be cut from.
        RELEASE_BRANCH = "master"

        // The type of service being released.
        SERVICE_TYPE = "aer"

        // The e2e test suite to execute on validation steps.
        E2E_TEST_SUITE = "src/test/resources/test_suites/jaws/jaws-e2e-suite.xml"

        // The maximum amount of time (in minutes) for tests to take before they are auto failed.
        TEST_TIMEOUT = 90

        // The maximum amount of time (in minutes) for deploys to take before they are auto failed.
        DEPLOY_TIMEOUT = 20

        // Allow retry for austin engineering group.
        RETRY_SUBMITTER = "Engineering Austin IdentityNow"

        // Reset org parameter could be true, false, atom or delete.
        TEST_RESET_ORG = "atom"

        // Specifies a random (pool) org will be used each time.
        ORG_NAME = "random"

        // The branch of E2E tests to use.
        TEST_BRANCH = "master"

        // The name of the jenkins_release_utils script used to execute the build
        BUILD_SCRIPT_NAME = "atlas_service_make_docker_build.sh"

        // the GitHub url
        GITHUB_REPO = "git@github.com:sailpoint/cloud-audit.git"
        GITHUB_REPO_NAME = "sailpoint/cloud-audit"

        SLACK_CHANNEL = "#team-eng-platform-core-jnk"

        // Test metrics parameters
        JENKINS_BUILD = "${env.JOB_NAME}.${env.BUILD_NUMBER}"
        SCRUM = 'scrum-platform-core-services'
        TEST_RESULTS_SOURCE = 'pipeline'
    }

    stages {
        stage('Build SDS') {
            when {
                branch env.RELEASE_BRANCH
            }

            steps {
                // Once a milestone is reached no older builds are allowed to pass.
                milestone(ordinal: 100, label:'Build')

                echo "${env.SERVICE_TYPE} service release pipeline for ${env.BUILD_NUMBER} is starting."

                script {
                    // Run on an ec2 worker node
                    node {
                        label 'devaws'
                        env.JAVA_HOME="${tool 'openjdk1.8.0_191'}"
                        env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"
                        sh 'java -version'

                        try {
                            // Checkout code from repository. NOTE: This will be defined in the Jenkins job
                            checkout scm
                            sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 406205545357.dkr.ecr.us-east-1.amazonaws.com"
                            echo "Starting build of ${env.SERVICE_TYPE}"
                            // Build cms with gradlew
                            atlasServiceBuild([
                                    service_name: env.SERVICE_TYPE,
                                    version: env.BUILD_NUMBER,
                                    timeout: Integer.valueOf(env.DEPLOY_TIMEOUT),
                                    git_repo: env.GITHUB_REPO,
                                    boot_script_name: env.BUILD_SCRIPT_NAME
                            ])
                        } finally {
                            // Always cleanup the workspace
                            deleteDir()
                        }
                    }
                }
            }
        }

        stage('Deploy to Bermuda') {
            when {
                branch env.RELEASE_BRANCH
            }

            agent {
                node {
                    label 'devaws'
                }
            }

            steps {
                echo "Deploying ${env.SERVICE_TYPE} build ${env.BUILD_NUMBER} to bermuda."
                script {
                    def attempts = 0
                    waitUntil {
                        try {

                            drydockDeploy([
                                    timeout      : Integer.valueOf(env.DEPLOY_TIMEOUT),
                                    drydock_host : 'slipway.infra.identitynow.com',
                                    pod          : 'bermuda',
                                    module       : env.SERVICE_TYPE,
                                    version      : env.BUILD_NUMBER
                            ])
                            echo "Completed deployment to bermuda"
                            return true
                        } catch(error) {
                            echo "Bermuda deployment attempt failed with error: ${error}"
                            attempts++

                            sendSlackNotification("${env.SLACK_CHANNEL}", "${env.JIRA_COMPONENT} release pipeline for ${env.BUILD_URL} failed on bermuda deployment ${attempts} time(s), should I try again?<br/>Error: ${error}", 'failure')
                            input (
                                    message: "Bermuda verification failed ${attempts} time(s), should I retry the tests?",
                                    submitter: env.RETRY_SUBMITTER
                            )
                            return false
                        }
                    }
                }
            }
        }

        stage('Verify Bermuda') {
            when {
                branch env.RELEASE_BRANCH
            }

            steps {
                script {
                    def attempts = 0
                    waitUntil {
                        try {
                            node {
                                label 'devaws'
                                env.JAVA_HOME="${tool 'openjdk1.8.0_191'}"
                                env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"
                                sh 'java -version'

                                // Test the build on bermuda
                                timeout(time: Integer.valueOf(env.TEST_TIMEOUT), unit: 'MINUTES') {
                                    echo "Verify build ${env.BUILD_NUMBER} on bermuda"
                                    atlasServiceTest([
                                            test_branch : env.TEST_BRANCH,
                                            test_org    : env.ORG_NAME,
                                            pod         : 'bermuda',
                                            test_suite  : env.E2E_TEST_SUITE,
                                            reset_org   : env.TEST_RESET_ORG,
                                            attempts    : attempts,
                                            additional_commands : '-Dscrum=' + SCRUM +
                                                ' -DjenkinsBuild=' + JENKINS_BUILD +
                                                ' -DtestResultsSource=' + TEST_RESULTS_SOURCE +
                                                ' -DawsRegion=US_WEST_2'
                                    ])
                                }
                            }
                            return true
                        } catch(error) {
                            echo "Bermuda verification attempt failed with error: ${error}"
                            attempts++

                            sendSlackNotification("${env.SLACK_CHANNEL}", "${env.JIRA_COMPONENT} release pipeline for ${env.BUILD_URL} failed on bermuda verification ${attempts} time(s), should I try again?<br/>Error: ${error}", 'failure')
                            input (
                                    message: "Bermuda verification failed ${attempts} time(s), should I retry the tests?",
                                    submitter: env.RETRY_SUBMITTER
                            )
                            return false
                        }
                    }
                }
            }
        }

        stage('Deploy to Lighthouse') {
            when {
                branch env.RELEASE_BRANCH
            }

            agent {
                label 'devaws'
            }

            steps {
                script {

                    def pods = [
                            "dev01-useast1",
                            "lighthouse",
                            "megapod-useast1",
                            "perf01-useast2"
                    ]

                    def stepsForParallel = [:]
                    for (int i = 0; i < pods.size(); i++) {
                        def pod = pods[i]
                        def delay = i*2
                        stepsForParallel["Deploy to ${pod}"] = { ->

                            // Drydock doesn't like you spamming it.
                            sleep(time: delay, unit: 'SECONDS')

                            echo "Deploy to ${pod}..."
                            drydockDeploy([
                                    timeout      : Integer.valueOf(env.DEPLOY_TIMEOUT),
                                    drydock_host : 'slipway.infra.identitynow.com',
                                    pod          : pod,
                                    module       : env.SERVICE_TYPE,
                                    version      : env.BUILD_NUMBER
                            ])
                            echo "Completed deploy to ${pod}"
                        }
                    }

                    echo "Deploying to pods: ${pods}"

                    def attempts = 0
                    waitUntil {
                        try {
                            parallel stepsForParallel

                            echo "Completed deployment to all pods: ${pods}"
                            return true
                        } catch(error) {
                            echo "${pods} deployment attempt failed with error: ${error}"
                            attempts++

                            sendSlackNotification("${env.SLACK_CHANNEL}", "${env.JIRA_COMPONENT} release pipeline for ${env.BUILD_URL} failed on ${pods} deployment ${attempts} time(s), should I try again?<br/>Error: ${error}", 'failure')
                            input (
                                    message: "${pods} deployment failed ${attempts} time(s), should I retry the deploy?",
                                    submitter: env.RETRY_SUBMITTER
                            )
                            return false
                        }
                    }

                }
            }
        }

        stage('Verify Lighthouse') {
            when {
                branch env.RELEASE_BRANCH
            }

            steps {
                script {
                    def attempts = 0
                    waitUntil {
                        try {

                            node {
                                label 'devaws'
                                env.JAVA_HOME="${tool 'openjdk1.8.0_191'}"
                                env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"
                                sh 'java -version'

                                // Test the build on lighthouse
                                timeout(time: Integer.valueOf(env.TEST_TIMEOUT), unit: 'MINUTES') {
                                    echo "Verify build ${env.BUILD_NUMBER} on lighthouse"
                                    atlasServiceTest([
                                            test_branch : env.TEST_BRANCH,
                                            test_org    : env.ORG_NAME,
                                            pod         : 'lighthouse',
                                            test_suite  : env.E2E_TEST_SUITE,
                                            reset_org   : env.TEST_RESET_ORG,
                                            attempts    : attempts,
                                            additional_commands : '-Dscrum=' + SCRUM +
                                                ' -DjenkinsBuild=' + JENKINS_BUILD +
                                                ' -DtestResultsSource=' + TEST_RESULTS_SOURCE
                                    ])
                                }
                            }
                            return true
                        } catch(error) {
                            echo "Lighthouse verification attempt failed with error: ${error}"
                            attempts++

                            sendSlackNotification("${env.SLACK_CHANNEL}", "${env.JIRA_COMPONENT} release pipeline for ${env.BUILD_URL} failed on lighthouse verification ${attempts} time(s), should I try again?<br/>Error: ${error}", 'failure')
                            input (
                                    message: "Lighthouse verification failed ${attempts} time(s), should I retry the tests?",
                                    submitter: env.RETRY_SUBMITTER
                            )
                            return false
                        }
                    }
                }
            }
        }

        stage('Create Deployment Ticket') {
            when {
                branch env.RELEASE_BRANCH
            }

            agent {
                label 'devaws'
            }

            steps {

                // Once a milestone is reached no older builds are allowed to pass.
                milestone(ordinal: 200, label:'Create Jira Ticket')

               script {
                   def currentlyDeployedBuildNumber = getCurrentlyDeployedBuild([release_component: "${env.SERVICE_TYPE}", is_dev: "true"])
                   if (currentlyDeployedBuildNumber?.trim()) {
                       createC3P0DeployTicket([
                               project          : env.JIRA_PROJECT,
                               repository       : env.GITHUB_REPO_NAME,
                               src_tag          : "jenkins/${env.SERVICE_TYPE}/${currentlyDeployedBuildNumber}",
                               dest_tag         : "jenkins/${env.SERVICE_TYPE}/${env.BUILD_NUMBER}",
                               application      : "atlas",
                               build_number     : env.BUILD_NUMBER,
                               components       : env.JIRA_COMPONENT,
                               release_component: env.JIRA_COMPONENT
                       ])
                   }
                   else {
                       echo "No previously deployed versions of ${env.SERVICE_TYPE} were found."
                   }
               }

               echo "All done, deployment is ready for approval"
            }
        }
    }

    post {
        success {
            sendSlackNotification("${env.SLACK_CHANNEL}", "${env.JIRA_COMPONENT} release pipeline for ${env.BUILD_URL} was successful.", 'success')
        }
        failure {
            sendSlackNotification("${env.SLACK_CHANNEL}", "${env.JIRA_COMPONENT} release pipeline for ${env.BUILD_URL} failed.", 'failure')
        }
        aborted {
            sendSlackNotification("${env.SLACK_CHANNEL}", "${env.JIRA_COMPONENT} release pipeline for ${env.BUILD_URL} aborted.", 'aborted')
        }
    }
}
