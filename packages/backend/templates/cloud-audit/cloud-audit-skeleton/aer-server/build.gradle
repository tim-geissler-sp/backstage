plugins {
	id 'application'
}

application {
	mainClass = "com.sailpoint.audit.AuditServerApplication"
	applicationDefaultJvmArgs = ["-Xmx512m", "-Xms512m",
								 "-Dfile.encoding=UTF-8",
								 "-XX:+UseConcMarkSweepGC", "-XX:+CMSParallelRemarkEnabled",
								 "-XX:+UseCMSInitiatingOccupancyOnly", "-XX:CMSInitiatingOccupancyFraction=70",
								 "-XX:+ScavengeBeforeFullGC", "-XX:+CMSScavengeBeforeRemark",
								 "-XX:+PrintGCDateStamps", "-verbose:gc", "-XX:+PrintGCDetails", "-Xloggc:/tmp/mantis_gc.log",
								 "-XX:+UseGCLogFileRotation", "-XX:NumberOfGCLogFiles=10", "-XX:GCLogFileSize=100M"
	]
}

run {
	if (project.hasProperty('args')) {
		args project.args.split('\\s+')
	}
	if (project.hasProperty('jvmArgs')) {
		applicationDefaultJvmArgs.addAll(project.jvmArgs.split('\\s+'))
	}
}

distributions {
	main {
		baseName = "aer-server"
		contents {
			from { '../dockerfiles/aer-server' }
		}
	}
}

startScripts {
	def props = new Properties()
	file("../gradle.properties").withInputStream { props.load(it) }

	// If we want to build with Contrast agent, we need to dynamically
	// obtain the variable from gradle.properties
	doFirst {
		if (props.toString().contains("org.gradle.jvmargs") && props.toString().contains("contrast")) {
			def arguments = props.getProperty("org.gradle.jvmargs")

			// Remove the generated javaagent path and replace it with
			// another one as the file structure is different in Docker
			def path = "../contrast.jar"

			arguments = arguments.replaceFirst('javaagent.*?jar', 'javaagent:' + path)
			arguments = arguments.replaceFirst('contrast.env=qa', 'contrast.env=development')
			arguments = arguments.replaceFirst('contrast.override.appname', 'application.name')
			arguments = arguments + ' -Dassess.tags=aer '

			def dockerfileContent = project.file("../dockerfiles/aer-server/Dockerfile").getText('UTF-8')
			dockerfileContent = dockerfileContent.replaceAll('AER_SERVER_OPTS "', 'AER_SERVER_OPTS "' + arguments)

			//Rewrite the dockerfile to have Contrast specific variables
			new File("Dockerfile").write(dockerfileContent, 'UTF-8')
		}
	}
}

dependencies {
	implementation(project(":audit-module"))
	implementation(project(":audit-events"))

	implementation("com.sailpoint:atlas-usage-plugin")
	implementation("com.sailpoint:atlas-tracing-plugin")
	implementation("com.sailpoint:atlas-profiling")

	testImplementation "org.testcontainers:testcontainers:$project.TESTCONTAINERS_VERSION"
	testImplementation "org.testcontainers:localstack"
}

jar {
	archivesBaseName = 'aer'
	project.version = null
	manifest {
		attributes('Implementation-Title': 'aer',
			'Implementation-Version': project.hasProperty('customVersion') ? project['customVersion'] : 'Unavailable',
			'Implementation-Vendor': 'SailPoint',
			'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()))
	}
	dependsOn 'dependenciesList'
}

task('dependenciesList') {
	doLast {
		println "Runtime dependencies"
		def selectedDeps = project.configurations.runtimeClasspath.incoming.resolutionResult.allDependencies.collect { dep ->
			"${dep.selected}"
		}
		selectedDeps.unique().sort().each { println it }
		sourceSets.main.output.resourcesDir.mkdirs()
		new File(sourceSets.main.output.resourcesDir, "dependencies.json")
			.text = "[\"" + selectedDeps.join("\",\"") + "\"]"
	}
}
