plugins {
	id 'java-library'
	id 'maven-publish'
	id 'jacoco'
	id "com.contrastsecurity.contrastplugin" version "2.0.0"
	id "io.freefair.lombok" version "5.2.1" apply false
	id "io.freefair.aspectj.post-compile-weaving" version "5.2.1" apply false
	id 'com.github.jk1.dependency-license-report' version '1.16'
}

if (project.hasProperty("snapshot")) {
	project.ATLAS_VERSION = "integration-SNAPSHOT"
}

allprojects {
	contrastConfiguration {
		username = "idn-security-triage@sailpoint.com"
		apiKey = System.getProperty('contrastApiKey')
		serviceKey = System.getProperty('contrastServiceKey')
		orgUuid = System.getProperty('contrastOrgUuid')
		apiUrl = "https://app.contrastsecurity.com/Contrast/api"
		appName = "AuthnEdgeApps"
		serverName = "hermes-server"
		minSeverity = "High"
	}
}

subprojects { subproject ->
	apply plugin: 'jacoco'
	apply plugin: 'java-library'
	apply plugin: 'io.freefair.aspectj.post-compile-weaving'
	apply plugin: "io.freefair.lombok"
	apply plugin: 'idea'

	aspectj {
		version = "1.9.5"
	}

	if (subproject.name == 'notification-api') {
		apply plugin: 'maven-publish'
	}

	group = "com.sailpoint"

	generateLombokConfig.enabled = false

	if (subproject.name == "api-test" || subproject.name == "notification-api") {
		compileJava {
			sourceCompatibility = '1.8'
			targetCompatibility = '1.8'

			options.encoding = 'UTF-8'
			ajc.options.compilerArgs << "-Xlint:ignore" << "-warn:none"
		}

		compileTestJava {
			sourceCompatibility = '1.8'
			targetCompatibility = '1.8'

			options.encoding = 'UTF-8'
			ajc.options.compilerArgs << "-Xlint:ignore" << "-warn:none"
		}
	} else {
		java {
			toolchain {
				languageVersion = JavaLanguageVersion.of(11)
			}
		}

		compileJava {
			sourceCompatibility = '11'
			targetCompatibility = '11'

			options.encoding = 'UTF-8'
			ajc.options.compilerArgs << "-Xlint:ignore" << "-warn:none"
		}

		compileTestJava {
			sourceCompatibility = '11'
			targetCompatibility = '11'

			options.encoding = 'UTF-8'
			ajc.options.compilerArgs << "-Xlint:ignore" << "-warn:none"
		}
	}

	configurations {
		runtime.exclude group: "org.apache.logging.log4j", module :"log4j-1.2-api"
	}

	repositories {
		mavenCentral()
		mavenLocal()

		maven {
			name "release"
			url "s3://sptcbu-mvn-repo/release"
			authentication {
				awsIm(AwsImAuthentication)
			}
		}

		maven {
			name "snapshot"
			url "s3://sptcbu-mvn-repo/snapshot"
			authentication {
				awsIm(AwsImAuthentication)
			}
		}

		maven {
			name "DynamoDB Local Release Repository - US West (Oregon) Region"
			url "http://s3-us-west-2.amazonaws.com/dynamodb-local/release"
		}
	}

	publishing {
		repositories {
			maven {
				authentication {
					awsIm(AwsImAuthentication)
				}
				def isSnapshot = subproject.version.contains('SNAPSHOT')
				url =  isSnapshot ? "s3://sptcbu-mvn-repo/snapshot" : "s3://sptcbu-mvn-repo/release"
			}
		}
	}

	if (subproject.hasProperty('jacocoTestCoverageVerification')) {
		subproject.check.dependsOn subproject.jacocoTestCoverageVerification
	}

	test {
		testLogging {
			exceptionFormat = 'full'
		}
	}

	task('dependenciesList') {
		doLast {
			println "Compile dependencies"
			def selectedDeps = project.configurations.compile.incoming.resolutionResult.allDependencies.collect { dep ->
				"${dep}"
			}
			selectedDeps.unique().sort().each { println it }
			sourceSets.main.output.resourcesDir.mkdirs()
			new File(sourceSets.main.output.resourcesDir, "dependencies.json")
					.text = "[\"" + selectedDeps.join("\",\"") + "\"]"
		}
	}

	if (subproject.name != 'api-test') {
		jar.dependsOn dependenciesList
	}

	task install(dependsOn: publishToMavenLocal)
	task uploadArchives(dependsOn: publish)
}
